name: Note Workflow (Gemini版)

on:
  workflow_dispatch:
    inputs:
      theme:
        description: '記事テーマ'
        required: true
        type: string
      target:
        description: '想定読者（ペルソナ）'
        required: true
        type: string
      message:
        description: '読者に伝えたい核メッセージ'
        required: true
        type: string
      cta:
        description: '読後のアクション（CTA）'
        required: true
        type: string
      tags:
        description: 'カンマ区切りタグ（任意）'
        required: false
        default: ''
        type: string
      is_public:
        description: '公開(true)/下書き(false)'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      dry_run:
        description: '投稿をスキップ（生成のみ）'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: read

env:
  TZ: Asia/Tokyo

jobs:
  generate:
    name: Generate article with Gemini API
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      THEME: ${{ github.event.inputs.theme }}
      TARGET: ${{ github.event.inputs.target }}
      MESSAGE: ${{ github.event.inputs.message }}
      CTA: ${{ github.event.inputs.cta }}
      TAGS: ${{ github.event.inputs.tags }}
    outputs:
      title: ${{ steps.collect.outputs.title }}
      article_b64: ${{ steps.collect.outputs.article_b64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install fetch
        run: |
          npm init -y
          npm i node-fetch

      - name: Generate article with Gemini
        run: |
          cat > gemini-note.mjs <<'EOF'
          import fetch from "node-fetch";
          import fs from "fs";

          const API_KEY = process.env.GEMINI_API_KEY;
          const THEME = process.env.THEME || "";
          const TARGET = process.env.TARGET || "";
          const MESSAGE = process.env.MESSAGE || "";
          const CTA = process.env.CTA || "";
          const TAGS = process.env.TAGS || "";

          const prompt = `
          あなたはnoteで人気記事を執筆するプロのライターです。
          以下の条件に基づいて、Markdown形式で記事を作成してください。

          # テーマ
          ${THEME}

          # 想定読者
          ${TARGET}

          # 伝えたいメッセージ
          ${MESSAGE}

          # 読後のアクション
          ${CTA}

          # タグ
          ${TAGS}

          ## 出力条件
          - Markdown形式で出力
          - タイトルを一行目に「# 」で記載
          - 小見出しや箇条書きを活用
          - note向けの自然な文体
          - 2000～4000文字程度
          `;

          const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${API_KEY}`;

          const response = await fetch(url, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              contents: [
                { role: "user", parts: [{ text: prompt }] }
              ]
            })
          });

          const data = await response.json();
          const text = data.candidates?.[0]?.content?.parts?.[0]?.text || "出力なし";
          console.log("=== Gemini出力 ===\n", text);

          const titleMatch = text.match(/^#\s*(.+)/);
          const title = titleMatch ? titleMatch[1] : "タイトル（自動生成）";
          fs.writeFileSync(".note-article.md", text);
          fs.writeFileSync(".note-title.txt", title);

          console.log("記事タイトル:", title);
          EOF

          node gemini-note.mjs

      - name: Collect outputs
        id: collect
        run: |
          title=$(cat .note-title.txt)
          b64=$(base64 -w 0 .note-article.md 2>/dev/null || base64 .note-article.md)
          echo "title<<EOF" >> $GITHUB_OUTPUT
          echo "$title" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "article_b64<<EOF" >> $GITHUB_OUTPUT
          echo "$b64" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  post:
    name: Post to note.com (Playwright)
    needs: generate
    if: ${{ github.event.inputs.dry_run != 'true' }}
    runs-on: ubuntu-latest
    env:
      IS_PUBLIC: ${{ github.event.inputs.is_public }}
      STATE_JSON: ${{ secrets.NOTE_STORAGE_STATE_JSON }}
      START_URL: https://editor.note.com/new
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright
        run: |
          npm init -y
          npm i playwright marked
          npx playwright install --with-deps chromium | cat

      - name: Prepare storageState
        id: state
        run: |
          test -n "$STATE_JSON" || (echo "ERROR: NOTE_STORAGE_STATE_JSON secret is not set" && exit 1)
          mkdir -p "$RUNNER_TEMP"
          echo "$STATE_JSON" > "$RUNNER_TEMP/note-state.json"
          echo "STATE_PATH=$RUNNER_TEMP/note-state.json" >> $GITHUB_OUTPUT

      - name: Restore article
        env:
          ARTICLE_B64: ${{ needs.generate.outputs.article_b64 }}
        run: |
          mkdir -p .note-artifacts
          echo "$ARTICLE_B64" | base64 -d > .note-artifacts/article.md || echo "$ARTICLE_B64" | base64 --decode > .note-artifacts/article.md

      - name: Publish via Playwright
        run: |
          cat > post.mjs <<'EOF'
          import { chromium } from "playwright";
          import { marked } from "marked";
          import fs from "fs";

          const STATE_PATH = process.env.STATE_PATH;
          const IS_PUBLIC = String(process.env.IS_PUBLIC || "false") === "true";
          const START_URL = process.env.START_URL || "https://editor.note.com/new";
          const md = fs.readFileSync(".note-artifacts/article.md", "utf8");
          const html = marked.parse(md);

          const titleMatch = md.match(/^#\s*(.+)/);
          const title = titleMatch ? titleMatch[1] : "タイトル（自動生成）";

          const browser = await chromium.launch({ headless: true });
          const context = await browser.newContext({ storageState: STATE_PATH });
          const page = await context.newPage();

          await page.goto(START_URL, { waitUntil: "domcontentloaded" });
          await page.waitForSelector('textarea[placeholder*="タイトル"]');
          await page.fill('textarea[placeholder*="タイトル"]', title);

          const bodyBox = page.locator('div[contenteditable="true"][role="textbox"]').first();
          await bodyBox.waitFor({ state: "visible" });
          await bodyBox.click();
          await page.keyboard.type(md.slice(0, 5000)); // 文字制限対策で部分入力

          if (!IS_PUBLIC) {
            const saveBtn = page.locator('button:has-text("下書き保存")').first();
            await saveBtn.waitFor({ state: "visible" });
            if (await saveBtn.isEnabled()) await saveBtn.click();
            console.log("✅ 下書き保存完了");
            await browser.close();
            process.exit(0);
          }

          const proceed = page.locator('button:has-text("公開に進む")').first();
          await proceed.waitFor({ state: "visible" });
          await proceed.click();

          const publishBtn = page.locator('button:has-text("投稿する")').first();
          await publishBtn.waitFor({ state: "visible" });
          await publishBtn.click();

          console.log("✅ 公開投稿完了");
          await browser.close();
          EOF
          node post.mjs
